name: NestJS

on:
  push:
    branches:
      - main
    paths:
      - '**.ts'
      - '**.js'
      - 'package.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - '.github/workflows/nestjs.yaml'
  pull_request:
    branches:
      - main
    paths:
      - '**.ts'
      - '**.js'
      - 'package.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - '.github/workflows/nestjs.yaml'

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Check format
        run: yarn format:check
      - name: Lint
        run: yarn lint
      - name: Setup docker compose
        run: docker compose --file compose-mysql.yaml up -d --wait --wait-timeout 120
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      - name: Push schema with Prisma
        run: yarn prisma db push
        env:
          DATABASE_URL: 'mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}?schema=public'
      - name: Generate Prisma SQL
        run: yarn prisma generate --sql
        env:
          DATABASE_URL: 'mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}?schema=public'
      - name: Build
        run: yarn build
      - name: Tests
        run: yarn test:cov
        env:
          DATABASE_URL: 'mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}?schema=public'
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile \
            --tag ${{ github.repository }}:${{ github.sha }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max
